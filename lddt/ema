#! /usr/bin/env python3

import os
import argparse
import subprocess
import sys
import inspect

def _parse_args():
    exec_dir = os.path.dirname(inspect.getfile(lambda: None))
    default_sif_path = os.path.join(exec_dir, "container", "ema.sif")
    desc = ("EMA runscript - Convenience wrapper to execute Python scripts "
            "using ost in a container. All arguments preceding an item ending "
            "with \".py\" are considered arguments for ema, the rest is "
            "considered input arguments for ost, i.e. you can execute "
            "\"./ema my_script.py --script_arg XYZ script_arg1 script_arg2\". "
            "Path to default container is estimated based "
            "on this scripts location (see sif argument). Mounting is required "
            "if the executed script requires access to any directory beyond "
            "what Singularity mounts by default (see Singularity docs). E.g. "
            "If you want to access file /this/is/an/absolute/path/x you must "
            "explicitely mount /this/is/an/absolute/path with the mount "
            "argument.")
    parser = argparse.ArgumentParser(description = desc)
    parser.add_argument("--singularity_exec", default="/usr/local/bin/singularity",
                        help = "Path to singularity executable, defaults to "
                        "singularity (i.e. takes what is in the system path)")
    parser.add_argument("--sif", default = default_sif_path, 
                        help = "Path to singularity image file, defaults to "
                        "<dir_containing_menzi_exec>/container/menzi.sif")
    parser.add_argument("--mount", action = 'append', help = "Mounts all given "
                        "paths into the singularity container, i.e. adds "
                        "'--bind <p>:<p>' for each p to the singularity exec "
                        "command.")
    parser.add_argument("--notebook", action = 'store_true', default=False,
                        help = "instead of ost, a jupyter notebook server is "
                        "started with \"jupyter notebook --no-browser\". "
                        "Additional args are appended to that command.")

    args = sys.argv[1:]
    ema_args = list()
    script_args = None
    for arg_idx, arg in enumerate(args):
        if arg.endswith(".py"):
            script_args = args[arg_idx:]
            break
        if arg == "--notebook":
            ema_args.append(arg)
            script_args = args[arg_idx+1:]
            break
        ema_args.append(arg)
    return (parser.parse_args(ema_args), script_args)

def main():
    args, script_args = _parse_args()

    # check for container existence
    if not os.path.exists(args.sif):
        raise RuntimeError(f"Singularity image file not found. searched for "
                           f"{args.sif}.")

    cmd = [args.singularity_exec, "exec"]

    # add mounts
    if args.mount:
        for m in args.mount:
            cmd += ["--bind", ':'.join([m, m])]

    # some tools use /tmp in a hardcoded way, let's mount /tmp from host
    # if present and any tempdir to which env variables might point
    env_vars = ["TMPDIR", "TEMP", "TEMPDIR", "TMP"]
    local_tmp = [os.getenv(v) for v in env_vars] + ["/tmp"]
    local_tmp = [x for x in local_tmp if x and os.path.exists(x)]
    local_tmp = list(set(local_tmp)) # only unique paths...
    for p in local_tmp:
        cmd += ["--bind", f"{p}:/tmp"]

    cmd.append(args.sif)

    if args.notebook:    
        cmd.append("jupyter")
        cmd.append("notebook")
        cmd.append("--no-browser")
        cmd += script_args
    elif script_args:
        cmd.append("ost")
        cmd += script_args
    else:
        raise RuntimeError("Invalid arguments - expect --notebook or some "
                           "Python file ending with \".py\"")

    subprocess.run(cmd)

if __name__ == '__main__':
    main()
